import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { EsMappingService } from 'es-mapping-ts';
import { ElasticsearchService } from '../elasticsearch.service';
import { DEFAULT_INDEX_SETTINGS } from 'src/elasticsearch/config/es-indexing-settings.config';
import { searchHistoryRawMappings } from 'src/elasticsearch/mappings/search-history.mapping';
import { ES_INDICES } from 'src/elasticsearch/types/es-indices.enum';
import { applicationMetricsRawMappings } from 'src/elasticsearch/mappings/application-metrics.mapping';


@Injectable()
export class MappingRegistryService implements OnModuleInit {
  private readonly logger = new Logger(MappingRegistryService.name);

  constructor(private readonly elasticsearchService: ElasticsearchService) {}

  /**
   * Load all decorated mappings automatically generated by the es-mapping-ts library
   */
  private loadAllDecoratedMappings() {
    const allMappings = EsMappingService.getInstance().getMappings() as unknown as Array<{
      esmapping: {
        body: {
          properties: Record<string, any>;
        },
        index: string;
      },
      properties: Record<string, any>;
      readonly: boolean;
    }>;

    const filteredMappings = allMappings.filter(mapping => {
      if (!mapping.esmapping.index) {
        this.logger.error(`Index is not defined. Skipping mapping`);
        return false;
      }
      return true;
    });
    return filteredMappings;
  }

  private loadAllRawMappings() {
    const indicesToInitialize = [
      { name: ES_INDICES.SEARCH_HISTORY, mapping: searchHistoryRawMappings },
      { name: ES_INDICES.APPLICATION_METRICS, mapping: applicationMetricsRawMappings },
    ];
    return indicesToInitialize;
  }

  /**
   * Initialize analytics-related indices (i.e. search logs and user events)
   */
  private async initializeIndicesUsingRawMappings() {
    try {

      const indicesToInitialize = this.loadAllRawMappings();
      for (const index of indicesToInitialize) {
        // console.log(`Raw Mapping for ${index.name}:`, index.mapping);
        await this.elasticsearchService.createIndexIfRequired(index);
      }

    } catch (error) {
      this.logger.error(
        `Error initializing Analytics Elasticsearch indices: ${error.message}`,
        error.stack,
      );
    }
  }


  private async initializeIndicesUsingDecoratedEntities() {
    try {
      const indicesToInitialize = this.loadAllDecoratedMappings();
      for (const index of indicesToInitialize) {
        // console.log(`Decorated Mapping for ${index.esmapping.index}:`, index.esmapping.body);
        await this.elasticsearchService.createIndexIfRequired({
          name: index.esmapping.index,
          mapping: index.esmapping.body,
        });
      }

    } catch (error) {
      this.logger.error(
        `Error initializing Analytics Elasticsearch indices: ${error.message}`,
        error.stack,
      );
    }
  }


  async onModuleInit() {
    try {

      await this.initializeIndicesUsingRawMappings();

      // 2. Initialize indices using decorated entities
      // await this.initializeIndicesUsingDecoratedEntities();

    } catch (error) {
      this.logger.error(
        `Error registering Elasticsearch mappings: ${error.message}`,
        error.stack,
      );
      throw error;
    }
  }

} 